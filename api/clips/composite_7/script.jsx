var project = new File("SongLyrics.aep");app.open(project);var arrayColor = hexToRgb (hexColor);var textColor = [arrayColor[0]/255, arrayColor[1]/255, arrayColor[2]/255];function hexToRgb(hex) {    var arrayRGB= [];    var bigint = parseInt(hex, 16);    var r = (bigint >> 16) & 255;    arrayRGB.push(r)    var g = (bigint >> 8) & 255;    arrayRGB.push(g)    var b = bigint & 255;    arrayRGB.push(b)    return arrayRGB;}var backgroundImagePath = clipPath + imageName;var footageURL = clipPath + clipName;var myComp;app.beginUndoGroup("Template 7 Script");// this loop to help get right paterm to apply script, in example here is Typography Scenes 4 for (var i = 1; i <= app.project.numItems; i ++) {    if ((app.project.item(i) instanceof CompItem) && (app.project.item(i).name === '7')) {        myComp = app.project.item(i);        break;    }}var newFootage = app.project.importFile(new ImportOptions(File(footageURL)));var audioFootage = myComp.layers[10];audioFootage.replaceSource(newFootage, true);var duration = audioFootage.source.duration;myComp.workAreaDuration = duration;// fade - remove existing keyframes, and add new ones in last 0.5s of clipsmyComp.layers[1].outPoint = duration; // Fade layer var fadeOpacity = myComp.layers[1].opacity;if (fadeOpacity.numKeys > 0)     fadeOpacity.removeKey(1);if (fadeOpacity.numKeys > 0)     fadeOpacity.removeKey(1);fadeOpacity.addKey(duration - 0.5);fadeOpacity.setValueAtKey(1, 0);fadeOpacity.addKey(duration);fadeOpacity.setValueAtKey(2, 100);// change other durationsmyComp.layers[2].outPoint = duration;  // rednote.commyComp.layers[3].outPoint = duration; // controlmyComp.layers[11].outPoint = duration;  // bg imagemyComp.layers[10].outPoint = duration;  // audio// Change background imagevar backgroundLayer = myComp.layers[11];var newBackground = app.project.importFile(new ImportOptions(File(backgroundImagePath)));backgroundLayer.replaceSource(newBackground, true);// Set new text layer:var arrayTextLayers = [];for (i = 0; i < 7; i ++){   var textLayer = myComp.layers[9 -i];   arrayTextLayers.push (textLayer);  }// Get number of lyric lines and duration for each line.var lyricLines = lyrics.length;var textDuration = duration / lyricLines;var startPosition = (770 - lyricLines*110) / 2;// Hide text layer doesn't exist:for (i = lyricLines; i < 7; i ++){   var textLayer = arrayTextLayers[i];   textLayer.enabled = false; }// Set text layer propertiesfor (i = 0; i < lyricLines; i++){     var textLayer  = arrayTextLayers[i];            // Set lyric for text layer     textLayer.property("Source Text").setValue(lyrics[i]);        // Set font for text layer      var textProp = textLayer.property("Source Text");      var textDocument = textProp.value;            // set type of font for layer            textDocument.font = fontType;            // set color for text      textDocument.fillColor = textColor;     //textDocument.strokeColor = [0, 1, 0];     //textDocument.applyStroke = true;       textDocument.applyFill = true;              textProp.setValue(textDocument);        // Set start and end time for text layer      textLayer.inPoint = textDuration * i + textDuration*0.1;      textLayer.outPoint = duration;    // Adjust font size for fit screen     var inPointOfLayer =  textDuration * i + textDuration*0.1;    var rect = textLayer.sourceRectAtTime(inPointOfLayer,false);    var width  = rect.width;    var height = rect.height;               var tempWidth = rect.width;              var tempFontsize = 300;                      while (tempWidth > 1000)         {                 var textProp = textLayer.property("Source Text");              var textDocument = textProp.value;                                var newFontsize = tempFontsize - 2;                            textDocument.fontSize =newFontsize;              tempFontsize = newFontsize;               textProp.setValue(textDocument);                                            var tempRect = textLayer.sourceRectAtTime(inPointOfLayer,false);                            tempWidth = tempRect.width;                       }               var endTime = textDuration* (i + 1);           editTextLayer(myComp, textLayer, textDuration,endTime,i);}function editTextLayer(myComp, layer, textDuration,timeEnd,indexLayer) {    // Set time for animations    var animatorOffset = layer.property("Text").property("Animators").property("Animator - Oscillate Scale").property("Selectors").property("Selector - Offset").property("Offset")    if (animatorOffset.numKeys > 0)        animatorOffset.removeKey(1);    if (animatorOffset.numKeys > 0)        animatorOffset.removeKey(1);    animatorOffset.addKey(layer.inPoint);    animatorOffset.setValueAtKey(1, -11);    animatorOffset.addKey(timeEnd - textDuration*0.3);    animatorOffset.setValueAtKey(2, 100);    // Set time for Scale    var scale = layer.property("Text").property("Animators").property("Animator - Oscillate Scale").property("Properties").property("Scale");        if (scale.numKeys > 0)        scale.removeKey(1);        if (scale.numKeys > 0)        scale.removeKey(1);        if (scale.numKeys > 0)        scale.removeKey(1);       if (scale.numKeys > 0)        scale.removeKey(1);        if (scale.numKeys > 0)        scale.removeKey(1);           // Can find the way to get access this property ???   var endTimeOfScale = timeEnd - textDuration*0.3;   var startTimeOfScale = layer.inPoint;      var tempTime = (endTimeOfScale - startTimeOfScale) / 5;            for (j = 0; j < 6; j++)    {        if ((j % 2) == 0)        {               scale.addKey(layer.inPoint + tempTime *j);               scale.setValueAtKey(j + 1, [-500,-500]);         }          else          {                scale.addKey(layer.inPoint + tempTime *j);                scale.setValueAtKey(j + 1, [500,500]);           }     }     // Set time for Mask  var mask = layer.property("Masks").property("Mask 1").property("Mask Path");      if (mask.numKeys > 0)        mask.removeKey(1);    if (mask.numKeys > 0)        mask.removeKey(1);      mask.addKey(layer.inPoint);    var myShape = new Shape();    myShape.vertices = [[-1456,562],[-1456,-517],[-376,-517],[-376,562]];    mask.setValueAtKey(1, myShape);     mask.addKey(timeEnd - textDuration*0.3);      var myShape1 = new Shape();    myShape1.vertices = [[-545,562],[-545,-517],[535,-517],[535,562]];    mask.setValueAtKey(2, myShape1);            // set position   var position = layer.property("Transform").property("Position");       if (position.numKeys > 0)        position.removeKey(1);    if (position.numKeys > 0)        position.removeKey(1);        position.addKey(timeEnd - textDuration*0.3);     position.setValueAtKey(1,[540,970]);          position.addKey(timeEnd - textDuration*0.1);     var positionEnd = 230 + startPosition + indexLayer*130;     position.setValueAtKey(2,[540,positionEnd]);      }app.project.close(CloseOptions.SAVE_CHANGES);app.quit();