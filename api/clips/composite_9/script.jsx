var project = new File("SongLyrics.aep");app.open(project);var arrayColor = hexToRgb (hexColor);var textColor = [arrayColor[0]/255, arrayColor[1]/255, arrayColor[2]/255];function hexToRgb(hex) {    var arrayRGB= [];    var bigint = parseInt(hex, 16);    var r = (bigint >> 16) & 255;    arrayRGB.push(r)    var g = (bigint >> 8) & 255;    arrayRGB.push(g)    var b = bigint & 255;    arrayRGB.push(b)    return arrayRGB;}var backgroundImagePath = clipPath + imageName;var footageURL = clipPath + clipName;app.beginUndoGroup("Template 9 Script");var myComp;for (var i = 1; i <= app.project.numItems; i ++) {    if ((app.project.item(i) instanceof CompItem) && (app.project.item(i).name === '9')) {        myComp = app.project.item(i);        break;    }}// Set audio:var newFootage = app.project.importFile(new ImportOptions(File(footageURL)));var audioFootage = myComp.layers[10];audioFootage.replaceSource(newFootage, true);// hide one audiovar audioFootage2 = myComp.layers[11];audioFootage2.replaceSource(newFootage, true);var duration = audioFootage.source.duration;myComp.workAreaDuration = duration;// fade - remove existing keyframes, and add new ones in last 0.5s of clipsmyComp.layers[1].outPoint = duration; var fadeOpacity = myComp.layers[1].opacity;if (fadeOpacity.numKeys > 0)     fadeOpacity.removeKey(1);if (fadeOpacity.numKeys > 0)     fadeOpacity.removeKey(1);fadeOpacity.addKey(duration - 0.5);fadeOpacity.setValueAtKey(1, 0);fadeOpacity.addKey(duration);fadeOpacity.setValueAtKey(2, 0);// change other durationsmyComp.layers[2].outPoint = duration;  // rednote.commyComp.layers[9].outPoint = duration; // Bg imagemyComp.layers[10].outPoint = duration; // audiomyComp.layers[10].inPoint = 0;myComp.layers[11].outPoint = duration; // audiomyComp.layers[11].inPoint = 0;// Change background imagevar backgroundLayer = myComp.layers[9];var newBackground = app.project.importFile(new ImportOptions(File(backgroundImagePath)));backgroundLayer.replaceSource(newBackground, true);// Divide duration for each wordvar allLyricWords = lyrics.join (" ");var res = allLyricWords.split(" ");var numberOfWords = res.length;var wordDuration = duration / numberOfWords;/// Set new text layer:var arrayTextLayers = [];for (m = 0; m < 7; m ++){   var textLayer = myComp.layers[8 - m];   arrayTextLayers.push (textLayer);  }// Hide text layer doesn't use:var lyricLines = lyrics.length;for (i = lyricLines; i < 6; i ++){   var textLayer = arrayTextLayers[i];   textLayer.enabled = false; }// Set new phrasevar tempTime = 0;for (i = 0; i < lyrics.length; i ++){    var newPhrase = arrayTextLayers[i] ;               var lyricStr = lyrics[i];            var splitLyric = lyricStr.split(" ");            var numberWords = splitLyric.length;            var phraseDuration = numberWords*wordDuration;                                 newPhrase.startTime = tempTime;            newPhrase.duration = phraseDuration;                      newPhrase.inPoint = tempTime;           newPhrase.outPoint = tempTime +  phraseDuration;                       tempTime = tempTime + numberWords*wordDuration;                      editTextLayerPhrase1(myComp,newPhrase,phraseDuration,splitLyric,numberWords)         }function editTextLayerPhrase1(myComp, phrase, phraseTime,arrayWords,numberWords){    phrase.workAreaDuration = phraseTime;    phrase.workAreaEnd = phraseTime;     var averageTime = phraseTime /  numberWords;        var phraseSource = phrase.source;    var controlLayer = phraseSource.layer(1);        // deal with control    controlLayer.inPoint = 0;    controlLayer.outPoint = phraseTime;        // work with control anchor        var controlAnchor = controlLayer.property("Transform").property("Anchor Point");    while (controlAnchor.numKeys > 0)    {         controlAnchor.removeKey(1);      }           // set control anchor           controlAnchor.addKey(0);           controlAnchor.setValueAtKey(1,[50,50,2000]);                      controlAnchor.addKey(averageTime*0.08);           controlAnchor.setValueAtKey(2,[50,50,0]);                   var controlIndex;        for (l = 0; l < numberWords; l++)       {             controlAnchor.addKey(l*averageTime + averageTime*0.5);               controlAnchor.setValueAtKey(l + 3,[50,50,-((l+1)*2000)]);               controlIndex = l + 3;        }               controlAnchor.addKey(phraseTime);           controlAnchor.setValueAtKey(controlIndex + 1,[50,50,2000]);        // deal with end layer    var endLayer = phraseSource.layer(2);     endLayer.property("Source Text").setValue(arrayWords[numberWords - 1]);     endLayer.inPoint = 0;     endLayer.outPoint = phraseTime;           var anchorPoint =  endLayer.property("Transform").property("Anchor Point");      anchorPoint.setValue([5.1,-42.9,(numberWords - 1)*2000]);             var opacity = endLayer.property("Transform").property("Opacity");         while (opacity.numKeys > 0)         {         opacity.removeKey(1);         }             // Set font for text layer      var textProp = endLayer.property("Source Text");      var textDocument = textProp.value;        // set type of font for layer            textDocument.font = fontType;            // set color for text      textDocument.fillColor = textColor;     //textDocument.strokeColor = [0, 1, 0];     //textDocument.applyStroke = true;       textDocument.applyFill = true;              textProp.setValue(textDocument);     // create new layer      var oldLayer = phraseSource.layer(3);     for (j = 0; j < numberWords -1; j ++)     {         var newLayer;         if (j == 0)         newLayer = oldLayer;         else           newLayer = oldLayer.duplicate();                      newLayer.property("Source Text").setValue(arrayWords[j]);     // Set font for text layer      var textProp = newLayer.property("Source Text");      var textDocument = textProp.value;        // set type of font for layer            textDocument.font = fontType;            // set color for text      textDocument.fillColor = textColor;     //textDocument.strokeColor = [0, 1, 0];     //textDocument.applyStroke = true;       textDocument.applyFill = true;              textProp.setValue(textDocument);            newLayer.inPoint = 0;            newLayer.outPoint = phraseTime;                                // set anchor Point          var anchorPoint =  newLayer.property("Transform").property("Anchor Point");          anchorPoint.setValue([5.1,-42.9,j*2000]);                              // set opacity          var opacity = newLayer.property("Transform").property("Opacity");                while (opacity.numKeys > 0)         {              opacity.removeKey(1);         }           opacity.addKey( j* averageTime + averageTime*0.1);           opacity.setValueAtKey(1,100);                      opacity.addKey((j + 1)*averageTime - averageTime*0.1);           opacity.setValueAtKey(2,0);                                 opacity.addKey( phraseTime - averageTime*0.25 - (j*averageTime*0.1));              opacity.setValueAtKey(3,0);                       opacity.addKey(phraseTime - averageTime*0.1);             opacity.setValueAtKey(4,100);                            } }app.project.close(CloseOptions.SAVE_CHANGES);app.quit(); 